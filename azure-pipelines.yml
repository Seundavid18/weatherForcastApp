trigger:
- main

parameters:
- name: multi_platform_tests
  displayName: 'Run tests on both Windows and Linux'
  type: boolean
  default: false

variables:
  buildConfiguration: 'Release'

jobs:
- job: Build
  displayName: 'Build Project'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.x'

    - script: |
        dotnet restore
        dotnet build --configuration $(buildConfiguration)
      displayName: 'Restore and Build'

    # Run unit tests on Ubuntu only if multi_platform_tests is false
    - ${{ if eq(parameters.multi_platform_tests, false) }}:
      - script: |
          dotnet test --configuration $(buildConfiguration) \
                      --collect:"XPlat Code Coverage" \
                      --results-directory $(Build.SourcesDirectory)/TestResults
        displayName: 'Run Unit Tests (Ubuntu Only)'

      # - script: |
      #     dotnet tool install --global coverlet.console
      #     coverlet ./MyWeatherForecastApp.Tests/bin/Release/net9.0/MyWeatherForecastApp.Tests.dll \
      #       --target "dotnet" \
      #       --targetargs "test --no-build --configuration $(buildConfiguration)" \
      #       --output "$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml" \
      #       --format cobertura
      #   displayName: 'Run Tests and Generate Cobertura Coverage'


      # - script: |
      #     sed -i 's/version="[0-9.]*"/version="1"/' $(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml
      #   displayName: 'Force Coverage Version to 1'

      # - script: |
      #     grep '<coverage' $(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml
      #   displayName: 'Verify Coverage Version'

      # - script: |
      #     echo "Verifying coverage report location..."
      #     find $(Build.SourcesDirectory)/TestResults -name "*.xml"
      #   displayName: 'Verify Coverage Report Path'

      # - task: SonarCloudPrepare@1
      #   inputs:
      #     SonarCloud: 'Sonarcloud'
      #     organization: 'mini-bank-app'
      #     scannerMode: 'CLI'
      #     configMode: 'manual'
      #     cliProjectKey: 'mini-bank-app_weatherforcastapp'
      #     cliProjectName: 'weatherForcastApp'
      #     cliSources: '.'
      #     extraProperties: |
      #       sonar.verbose=true
      #       sonar.coverageReportPaths=$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml
      #   displayName: 'Prepare SonarCloud (Single Platform)'

      # # Run Tests & Generate Raw Coverage
      # - script: |
      #     dotnet tool install --global coverlet.console
      #     export PATH="$PATH:~/.dotnet/tools"
      #     coverlet ./MyWeatherForecastApp.Tests/bin/Release/net9.0/MyWeatherForecastApp.Tests.dll \
      #       --target "dotnet" \
      #       --targetargs "test --no-build --configuration $(buildConfiguration)" \
      #       --output "$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml" \
      #       --format cobertura
      #   displayName: 'Run Tests and Generate Cobertura Coverage'

      - script: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml \
            -targetdir:$(Build.SourcesDirectory)/TestResults/ConvertedCoverage \
            -reporttypes:Cobertura \
            -reportversion:4.0
        displayName: 'Generate Correct Cobertura Coverage Report'

      # Convert Coverage to Compatible Format
      - script: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          export PATH="$PATH:~/.dotnet/tools"
          reportgenerator \
            -reports:$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml \
            -targetdir:$(Build.SourcesDirectory)/TestResults/ConvertedCoverage \
            -reporttypes:Cobertura
        displayName: 'Convert Coverage Report with ReportGenerator'

      - script: |
          echo "Fixing coverage version..."
          sed -i 's/version="0"/version="1"/' $(Build.SourcesDirectory)/TestResults/ConvertedCoverage/Cobertura.xml
          grep '<coverage' $(Build.SourcesDirectory)/TestResults/ConvertedCoverage/Cobertura.xml
        displayName: 'Fix Coverage Report Version to 1'

      - script: |
          echo "Removing <sources> block..."
          sed -i '/<sources>/,/<\/sources>/d' $(Build.SourcesDirectory)/TestResults/ConvertedCoverage/Cobertura.xml
        displayName: 'Remove <sources> block from coverage report'

      # Verify Coverage Output
      - script: |
          echo "Checking converted coverage file..."
          head -n 20 $(Build.SourcesDirectory)/TestResults/ConvertedCoverage/Cobertura.xml
        displayName: 'Preview Converted Coverage Report'

      # SonarCloud Prepare with Converted Coverage
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'Sonarcloud'
          organization: 'mini-bank-app'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'mini-bank-app_weatherforcastapp'
          cliProjectName: 'weatherForcastApp'
          cliSources: '.'
          extraProperties: |
            sonar.verbose=true
            sonar.coverageReportPaths=$(Build.SourcesDirectory)/TestResults/ConvertedCoverage/Cobertura.xml
        displayName: 'Prepare SonarCloud (Single Platform)'

      - task: SonarCloudAnalyze@1
        displayName: 'Analyze with SonarCloud (Single Platform)'

      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
        displayName: 'Publish SonarCloud Results (Single Platform)'

    - task: PublishPipelineArtifact@1
      condition: succeeded()
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'BuildArtifacts'
      displayName: 'Publish Build Artifacts'


- job: Test_Analyze_Publish
  displayName: 'Test, Analyze, and Publish'
  dependsOn: Build
  strategy:
    matrix:
      linux:
        vmImage: 'ubuntu-latest'
        coverageDir: '$(System.DefaultWorkingDirectory)/TestResults/linux'
      windows:
        vmImage: 'windows-latest'
        coverageDir: '$(System.DefaultWorkingDirectory)/TestResults/windows'
    maxParallel: 2

  pool:
    vmImage: $(vmImage)  # âœ… Cleaner usage

  steps:
    - download: current
      artifact: BuildArtifacts

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.x'

    - script: |
        dotnet test --configuration $(buildConfiguration) \
                    --collect:"XPlat Code Coverage" \
                    --results-directory $(coverageDir)
      displayName: 'Run Tests on $(vmImage)'

    - publish: $(coverageDir)
      artifact: Coverage_$(vmImage)
      displayName: 'Publish Coverage ($(vmImage))'


- job: Merge_And_Analyze
  displayName: 'Merge Coverage & Analyze with SonarCloud'
  dependsOn: Test_Analyze_Publish

  pool:
    vmImage: 'ubuntu-latest'

  steps:
    - download: current
      artifact: Coverage_ubuntu-latest
    - download: current
      artifact: Coverage_windows-latest

    - script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(Pipeline.Workspace)/**/coverage.cobertura.xml \
                        -targetdir:$(Build.SourcesDirectory)/merged_coverage \
                        -reporttypes:Cobertura
      displayName: 'Merge Coverage Reports'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'Sonarcloud'
        organization: 'mini-bank-app'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'mini-bank-app_weatherforcastapp'
        cliProjectName: 'weatherForcastApp'
        cliSources: '.'
        extraProperties: |
          sonar.verbose=true
          sonar.coverageReportPaths=$(Build.SourcesDirectory)/merged_coverage/Cobertura.xml
      displayName: 'Prepare SonarCloud (Merged Coverage)'

    - task: SonarCloudAnalyze@1
      displayName: 'Analyze with SonarCloud (Merged Coverage)'

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarCloud Results (Merged Coverage)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
      displayName: 'Publish Application'

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop
      displayName: 'Publish Final Artifacts'


# trigger:
# - main

# pool:
#   vmImage: 'ubuntu-latest'

# variables:
#   buildConfiguration: 'Release'

# steps:
# - task: UseDotNet@2
#   inputs:
#     packageType: 'sdk'
#     version: '9.x'

# - script: |
#     dotnet restore
#     dotnet build --configuration $(buildConfiguration)
#   displayName: 'Restore and Build'

# - script: |
#     dotnet test --configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --results-directory $(Build.SourcesDirectory)/TestResults
#   displayName: 'Run Tests with Coverage'

# - script: |
#     dotnet tool install -g dotnet-reportgenerator-globaltool
#     reportgenerator -reports:$(Build.SourcesDirectory)/TestResults/**/*.xml \
#                     -targetdir:$(Build.SourcesDirectory)/Coverage_Linux \
#                     -reporttypes:Cobertura \
#                     -assemblyfilters:+* -filefilters:+* -classfilters:+*
#   displayName: 'Convert Coverage to Cobertura'

# - script: |
#     head -n 10 $(Build.SourcesDirectory)/Coverage_Linux/*.xml
#   displayName: 'Inspect Coverage Report Header'

# - task: SonarCloudPrepare@1
#   inputs:
#     SonarCloud: 'Sonarcloud'
#     organization: 'mini-bank-app'
#     scannerMode: 'CLI'
#     configMode: 'manual'
#     cliProjectKey: 'mini-bank-app_weatherforcastapp'
#     cliProjectName: 'weatherForcastApp'
#     cliSources: '.'
#     extraProperties: |
#       sonar.verbose=true
#       sonar.javascript.lcov.reportPaths=$(Pipeline.Workspace)/Coverage_Linux/lcov.info
#       sonar.coverageReportPaths=$(Build.SourcesDirectory)/Coverage_Linux/Cobertura.xml
#       sonar.exclusions=**/*.flow
  
# - task: SonarCloudAnalyze@1
#   displayName: "Analyze with SonarCloud"

# - task: SonarCloudPublish@1
#   inputs:
#     pollingTimeoutSec: '300'
#   displayName: 'Publish SonarCloud Results'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#     zipAfterPublish: true

# - publish: $(Build.ArtifactStagingDirectory)
#   artifact: drop


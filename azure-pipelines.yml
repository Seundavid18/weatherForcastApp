trigger:
- main

parameters:
- name: multi_platform_tests
  displayName: 'Run tests on both Windows and Linux'
  type: boolean
  default: false

variables:
  buildConfiguration: 'Release'

jobs:
- job: Build
  displayName: 'Build Project'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.x'

    - script: |
        dotnet restore
        dotnet build --configuration $(buildConfiguration)
      displayName: 'Restore and Build'

    # Run unit tests on Ubuntu only if multi_platform_tests is false
    - ${{ if eq(parameters.multi_platform_tests, false) }}:
      - script: |
          dotnet test --configuration $(buildConfiguration) \
                      --collect:"XPlat Code Coverage" \
                      --results-directory $(Build.SourcesDirectory)/TestResults
        displayName: 'Run Unit Tests (Ubuntu Only)'

      - publish: $(Build.SourcesDirectory)/TestResults
        artifact: Coverage_ubuntu
        displayName: 'Publish Coverage Artifact'

      - script: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:$(Build.SourcesDirectory)/TestResults/*/coverage.cobertura.xml \
            -targetdir:$(Build.SourcesDirectory)/TestResults/ConvertedCoverage \
            -reporttypes:SonarQube \
        displayName: 'Generate Correct Cobertura Coverage Report'

      - script: |
          echo "Checking converted coverage file..."
          head -n 20 $(Build.SourcesDirectory)/TestResults/ConvertedCoverage/SonarQube.xml
        displayName: 'Preview Converted Coverage Report'

      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'Sonarcloud'
          organization: 'mini-bank-app'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'mini-bank-app_weatherforcastapp'
          cliProjectName: 'weatherForcastApp'
          cliSources: '.'
          extraProperties: |
            sonar.verbose=true
            sonar.coverageReportPaths=$(Build.SourcesDirectory)/TestResults/ConvertedCoverage/SonarQube.xml
        displayName: 'Prepare SonarCloud (Single Platform)'

      - task: SonarCloudAnalyze@1
        displayName: 'Analyze with SonarCloud (Single Platform)'

      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
        displayName: 'Publish SonarCloud Results (Single Platform)'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: true
        displayName: 'Publish Application'

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: drop
        displayName: 'Publish Final Artifacts'


- job: Multi_platform_test_true
  displayName: 'Test when multi_platform_tests is true'
  dependsOn: Build
  condition: and(succeeded(), eq('${{ parameters.multi_platform_tests }}', true)) 
  strategy:
    matrix:
      linux:
        vmImage: 'ubuntu-latest'
        coverageDir: '$(System.DefaultWorkingDirectory)/TestResults/linux'
      windows:
        vmImage: 'windows-latest'
        coverageDir: '$(System.DefaultWorkingDirectory)/TestResults/windows'
    maxParallel: 2

  pool:
    vmImage: $(vmImage)

  steps:
    # - download: current
    #   artifact: BuildArtifacts

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.x'

    # Run tests on Windows
    - powershell: |
        cd $(Build.SourcesDirectory)/MyWeatherForecastApp.Tests
        dotnet test --configuration $(buildConfiguration) `
                    --collect:"XPlat Code Coverage" `
                    --results-directory $(coverageDir)
      displayName: 'Run Tests on Windows'
      condition: eq(variables['Agent.OS'], 'Windows_NT')
      continueOnError: true

    # Run tests on Linux
    - bash: |
        cd $(Build.SourcesDirectory)/MyWeatherForecastApp.Tests
        dotnet test --configuration $(buildConfiguration) \
                    --collect:"XPlat Code Coverage" \
                    --results-directory $(coverageDir)
      displayName: 'Run Tests on Linux'
      condition: eq(variables['Agent.OS'], 'Linux')

    - script: |
        echo "Verifying coverage files in $(coverageDir):"
        ls -R $(coverageDir)
      displayName: 'Verify Coverage Files'

    - publish: $(coverageDir)
      artifact: Coverage_$(vmImage)
      displayName: 'Publish Coverage Artifact ($(vmImage))'


- job: Multi_platform_test_true_merge_and_analyze
  displayName: 'Merge Coverage, Analyze with SonarCloud & Publish when multi_platform_tests is true'
  dependsOn: Multi_platform_test_true
  condition: and(succeeded(), eq('${{ parameters.multi_platform_tests }}', true)) 
  pool:
    vmImage: 'ubuntu-latest'

  steps:
    - download: current
      artifact: Coverage_ubuntu-latest
    - download: current
      artifact: Coverage_windows-latest

    - script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(Pipeline.Workspace)/**/coverage.cobertura.xml \
                        -targetdir:$(Build.SourcesDirectory)/merged_coverage \
                        -reporttypes:SonarQube \
                        -sourcedirs:$(Build.SourcesDirectory)
      displayName: 'Merge Coverage Reports with Path Fix'

    - script: |
        echo "Coverage reports found:"
        find $(Pipeline.Workspace) -name "coverage.cobertura.xml"
      displayName: 'List Coverage Reports'

    - script: |
        echo "Checking converted coverage file..."
        head -n 20 $(Build.SourcesDirectory)/merged_coverage/SonarQube.xml
      displayName: 'Preview Converted Coverage Report'
 
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'Sonarcloud'
        organization: 'mini-bank-app'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'mini-bank-app_weatherforcastapp'
        cliProjectName: 'weatherForcastApp'
        cliSources: '.'
        extraProperties: |
          sonar.verbose=true
          sonar.coverageReportPaths=$(Build.SourcesDirectory)/merged_coverage/SonarQube.xml
      displayName: 'Prepare SonarCloud (Merged Coverage)'

    - task: SonarCloudAnalyze@1
      displayName: 'Analyze with SonarCloud (Merged Coverage)'

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarCloud Results (Merged Coverage)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
      displayName: 'Publish Application'

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop
      displayName: 'Publish Final Artifacts'

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '9.x'

- script: |
    dotnet restore
    dotnet build --configuration $(buildConfiguration)
  displayName: 'Restore and Build'

- script: |
    dotnet test --configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --results-directory $(Build.SourcesDirectory)/TestResults
  displayName: 'Run Tests with Coverage'

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(Build.SourcesDirectory)/TestResults/**/*.xml \
                    -targetdir:$(Build.SourcesDirectory)/Coverage_Linux \
                    -reporttypes:Cobertura
  displayName: 'Convert Coverage to Cobertura'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'Sonarcloud'
    organization: 'mini-bank-app'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'mini-bank-app_weatherforcastapp'
    cliProjectName: 'weatherForcastApp'
    cliSources: '.'
    extraProperties: |
      sonar.verbose=true
      sonar.javascript.lcov.reportPaths=$(Pipeline.Workspace)/Coverage_Linux/lcov.info
      sonar.coverageReportPaths=$(Build.SourcesDirectory)/Coverage_Linux/Cobertura.xml
      sonar.exclusions=**/*.flow
  
- task: SonarCloudAnalyze@1
  displayName: "Analyze with SonarCloud"

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarCloud Results'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true

- publish: $(Build.ArtifactStagingDirectory)
  artifact: drop

